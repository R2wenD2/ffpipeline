apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: clone-test-upload
spec:
  params:
    - name: git-url
    - name: package
    - name: packages
    - name: gcs-location
  workspaces:
    - name: where-it-all-happens
    - name: gcs-creds
  tasks:
    - name: grab-source
      taskRef:
        name: git-clone
      params:
        - name: url
          value: $(params.git-url)
      workspaces:
        - name: output
          workspace: where-it-all-happens
    - name: run-tests
      retries: 5
      runAfter: [grab-source]
      taskRef:
        name: golang-test
      params:
        - name: package
          value: $(params.package)
        - name: flags
          value: -race -cover -v -json 
        - name: packages
          # HACKS to write the test results to a file
          # alternatives: write a Task that writes output to a file, capture stdout
          # (in the pipeline), and/or capture logs
          value: "$(params.packages) >> $(workspaces.source.path)/test-results-$(context.pipelineRun.name)"
      workspaces:
        - name: source
          workspace: where-it-all-happens
  finally:    
    - name: upload-results
      taskRef:
        name: gcs-upload
      workspaces:
        - name: source
          workspace: where-it-all-happens
        - name: credentials
          workspace: gcs-creds
      params:
        - name: serviceAccountPath
          value: service-account.json
        - name: path
          value: "test-results-$(context.pipelineRun.name)"
        - name: location
          value: $(params.gcs-location)
    - name: check-flakes
      params:
        - name: pipelinerun-name
          value: "$(context.pipelineRun.name)"
      taskSpec: 
        params:
          - name: pipelinerun-name
        steps:
          - name: checkflakes
            image: cfmanteiga/alpine-bash-curl-jq
            script: | 
              #!/usr/bin/env bash
              count=`jq --slurp < $(workspaces.where-it-all-happens.path)/test-results-$(params.pipelinerun-name) '.[] | select(.Action != "output") | select(.Action != "run") | select(.Test != null) | {(.Test): .Action}' | jq -s . | jq 'unique'`
              if [ count != 2 ]
              then
                echo "At least one test is flakey"
                exit 1
              fi
        workspaces:
        - name: where-it-all-happens
      workspaces:
        - name: where-it-all-happens
          workspace: where-it-all-happens




      
        
